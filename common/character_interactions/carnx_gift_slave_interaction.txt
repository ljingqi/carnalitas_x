# Gift one of your slaves to another ruler.
# Scopes: actor is the slave owner, recipient is the receiver, seconary_recipient is the slave.
carnx_gift_slave_interaction = {
	category = interaction_category_friendly
	desc = carnx_gift_slave_interaction_desc
	interface_priority = 60
	common_interaction = yes
	needs_recipient_to_open = yes
	icon = carnx_chain

	greeting = positive
	send_name = carnx_gift_slave_interaction
	notification_text = carnx_gift_slave_proposal

	answer_accept_key = carnx_gift_slave_accept
	answer_reject_key = carnx_gift_slave_reject

	populate_recipient_list = {
		scope:actor = {
			every_relation = {
				type = slave
				limit = {
					carn_slave_can_be_sold_trigger = yes
				}
				save_scope_as = slave
				if = {
					limit = {
						scope:actor = {
							NOT = { carnx_is_slavery_crime_trigger = { CHARACTER = scope:slave } }
						}
					}
					add_to_list = characters
				}
			}
		}
	}

	is_shown = {
		NOT = { has_game_rule = carn_slavery_content_disabled }
		NOT = { scope:actor = scope:recipient }
		scope:actor = {
			carnx_is_slave_owner_trigger = yes
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			carnx_can_start_interaction_trigger = yes
		}
		scope:recipient = {
			carnx_can_gift_slave_to_trigger = { PARTY = scope:actor }
		}
		trigger_if = {
			limit = { exists = scope:secondary_recipient }
			scope:secondary_recipient = {
				carn_slave_can_be_sold_trigger = yes
				custom_description = {
					text = "carnx_gifting_slaves_is_illegal"
					scope:actor = {
						NOT = { carnx_is_slavery_crime_trigger = { CHARACTER = scope:secondary_recipient } }
					}
				}
			}
		}
	}

	on_accept = {
		# Verify that they could become friend
		scope:recipient = {
			if = {
				limit = {
					NAND = {
						has_relation_friend = scope:actor
						has_relation_lover = scope:actor
						has_relation_soulmate = scope:actor
						has_relation_best_friend = scope:actor
					}
				}
				gifting_leads_towards_friendship_effect = yes
			}
		}

		# Warning for multiple gifts
		if = {
			limit = {
				scope:recipient = {
					has_opinion_modifier = {
						target = scope:actor
						modifier = gift_opinion
					}
				}
			}
			custom_tooltip = ALREADY_SENT_GIFT_WARNING
		}
		# Struggle Catalyst
		else = {
			limit = {
				scope:actor = {
					any_character_struggle = {
						involvement = involved
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_gift_independent_ruler
							CHAR = scope:recipient
						}
					}
				}
			}
			hidden_effect = {
				scope:actor = {
					every_character_struggle = {
						involvement = involved
						activate_struggle_catalyst = {
							catalyst = catalyst_gift_independent_ruler
							character = scope:actor
						}
					}
				}
			}
		}

		scope:actor = { save_scope_as = former_owner }
		scope:secondary_recipient = { save_scope_as = slave }
		scope:recipient = { save_scope_as = new_owner }
		carnx_gift_slave_interaction_effect = {
			OPINION = scope:slave.carnx_gift_slave_opinion
		}
	}

	auto_accept = no

	ai_accept = {
		base = 0

		modifier = {
			add = 50
			desc = carnx_slave_reason
		}

		# Slavery crime or shunned by faith
		modifier = {
			carnx_is_slavery_crime_trigger = { CHARACTER = scope:secondary_recipient }
			add = carnx_ai_negative_crime_impact_value
			desc = carnx_owning_crime_in_recipient_faith
		}
		modifier = {
			carnx_is_slavery_shunned_trigger = { CHARACTER = scope:secondary_recipient }
			add = carnx_ai_negative_shunned_impact_value
			desc = carnx_owning_shunned_in_recipient_faith
		}

		# Family and relations (-50 to -200 depending on how close the relation)
		# Reluctant to receive as gift family and relations, wants to ransom them instead
		carnx_family_and_relations_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = -50
		}

		# Lacking councillors, court positions, knights, or commanders (PIV for each skill, aptitude, or trait above cutoff)
		carnx_lacking_councillors_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_skill_impact_halved_value
		}
		carnx_lacking_court_positions_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_aptitude_impact_halved_value
		}
		carnx_lacking_knights_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_prowess_impact_halved_value
		}
		carnx_lacking_commanders_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_cs_impact_halved_value
		}

		# Claims (PIV if useful claims on neighbouring realms)
		carnx_claims_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_claims_impact_halved_value
		}

		# Attraction (0 to PIV depending on attraction, doubled for lustful, halved for chaste)
		carnx_attraction_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_attraction_impact_halved_value
		}

		# Female (PIV if a visibly fertile female)
		carnx_female_modifier = {
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_female_impact_halved_value
		}

		# Age (up to NIV depending on age)
		carnx_age_modifier = {
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_age_impact_halved_value
		}

		# Price (NIV if price < minor_gold_value, PIV if price > major_gold_value)
		carnx_base_price_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_price_impact_value
		}

		# Struggle motive
		modifier = {
			desc = AI_STRUGGLE_INTENT
			scope:recipient = {
				is_independent_ruler = yes
				any_character_struggle = {
					involvement = involved
				}
			}
			add = {
				value = 0
				if = {
					limit = {
						scope:recipient = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_gift_independent_ruler
							}
							has_character_flag = agenda_towards_escalation
						}
					}
					add = -50
				}
				else_if = {
					limit = {
						scope:recipient = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_gift_independent_ruler
							}
						}
					}
					add = 100
				}
			}
		}
	}

	ai_targets = {
		ai_recipients = liege
		ai_recipients = vassals
		ai_recipients = peer_vassals
		ai_recipients = neighboring_rulers
		ai_recipients = scripted_relations
	}
	ai_targets = {
		ai_recipients = children
		ai_recipients = family
		ai_recipients = dynasty
		max = 20
	}
	ai_target_quick_trigger = {
		adult = yes
	}

	ai_frequency = 60

	ai_potential = {
		is_adult = yes
		is_at_war = no
		ai_greed < medium_positive_ai_value
		NOT = {
			has_trait = greedy
		}
	}

	ai_min_reply_days = 0
	ai_max_reply_days = 0

	ai_will_do = {
		base = 0
		modifier = {
			add = carnx_gift_slave_ai_will_do_base
		}

		# Slave recently bought
		modifier = {
			scope:secondary_recipient = {
				has_character_flag = carnx_slave_recently_bought
			}
			add = -100
		}

		# Slavery shunned by faith
		modifier = {
			carnx_is_slavery_shunned_trigger = { CHARACTER = scope:secondary_recipient }
			add = carnx_ai_negative_shunned_impact_value
		}

		# Greed (0 to -50 depending on greed)
		modifier = {
			add = {
				value = ai_greed
				multiply = -0.01
				add = -1
				multiply = 25
			}
		}

		# Family and relations (-50 to -200 depending on how close the relation)
		# Reluctant to gift family and relations, wants to free them instead
		carnx_family_and_relations_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = -50
		}

		# Employed as councillor (NIV doubled), court position, knight / commander, or in some other way (NIV)
		carnx_employed_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_employed_impact_halved_value
		}

		# Lacking councillors, court positions, knights, or commanders (NIV for each skill, aptitude, or trait above cutoff)
		carnx_lacking_councillors_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_skill_impact_halved_value
		}
		carnx_lacking_court_positions_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_aptitude_impact_halved_value
		}
		carnx_lacking_knights_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_prowess_impact_halved_value
		}
		carnx_lacking_commanders_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_cs_impact_halved_value
		}

		# Claims (NIV if useful claims on neighbouring realms)
		carnx_claims_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_claims_impact_halved_value
		}

		# Attraction (0 to NIV depending on attraction, doubled for lustful, halved for chaste)
		carnx_attraction_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_attraction_impact_halved_value
		}

		# Female (NIV if a visibly fertile female)
		carnx_female_modifier = {
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_female_impact_halved_value
		}

		# Age (up to PIV depending on age)
		carnx_age_modifier = {
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_age_impact_halved_value
		}

		# Price (PIV if price < minor_gold_value, NIV if price > major_gold_value)
		carnx_base_price_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_price_impact_value
		}

		# Struggle
		modifier = {
			scope:recipient = {
				is_independent_ruler = yes
			}
			scope:actor = {
				any_character_struggle = {
					involvement = involved
				}
			}
			add = {
				value = 0
				if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_gift_independent_ruler
							}
							has_character_flag = agenda_towards_escalation
						}
					}
					add = -50
				}
				else_if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_gift_independent_ruler
							}
						}
					}
					add = 100
				}
			}
		}

		# Do not send double-gifts
		modifier = {
			scope:recipient = {
				has_opinion_modifier = {
					target = scope:actor
					modifier = gift_opinion
				}
			}
			factor = 0
		}

		# Basic filtering
		modifier = {
			scope:recipient = {
				NOT = { carnx_gift_slave_recipient_trigger = yes }
			}
			factor = 0
		}

		# Don't gift anything to rivals / nemesises
		modifier = {
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
				}
			}
			factor = 0
		}

		# More likely to gift the human player
		modifier = {
			scope:recipient = {
				is_ai = no
			}
			factor = 2
		}
	}
}
