# Sell one of your slaves to another ruler.
# Scopes: actor is the slave owner (seller), recipient is the buyer, seconary_recipient is the slave.
# Overridden from Carnalitas.
carn_sell_slave_interaction = {
	category = interaction_category_prison
	desc = carnx_sell_slave_interaction_desc
	interface_priority = 31
	common_interaction = yes
	needs_recipient_to_open = yes
	icon = carnx_chain

	greeting = positive
	send_name = carn_sell_slave_interaction

	ai_min_reply_days = 0
	ai_max_reply_days = 0

	redirect = {
		# If the recipient is a slave of scope:actor that they are likely to sell,
		# redirect to a random valid buyer who is likely to buy the slave
		scope:recipient = {
			if = {
				limit = {
					has_trait = slave
					has_relation_slave_owner = scope:actor
					carn_slave_can_be_sold_trigger = yes
					scope:actor = {
						is_ai = yes
						carnx_is_likely_to_sell_slave_trigger = { SLAVE = scope:recipient }
					}
				}
				save_scope_as = secondary_recipient
				random_ruler = {
					limit = {
						is_ai = yes
						carnx_valid_buyer_or_seller_trigger = { PARTY = scope:actor }
						carnx_can_sell_slave_to_trigger = { PARTY = scope:actor }
						carnx_is_likely_to_buy_slave_trigger = { SLAVE = scope:secondary_recipient }
						save_temporary_scope_as = buyer
						short_term_gold >= scope:secondary_recipient.carnx_slave_bid_price_value
					}
					save_scope_as = recipient
				}
			}
		}
	}

	populate_recipient_list = {
		scope:actor = {
			every_relation = {
				type = slave
				limit = {
					carn_slave_can_be_sold_trigger = yes
				}
				save_scope_as = slave
				if = {
					limit = {
						scope:actor = {
							NOT = { carnx_is_slavery_crime_trigger = { CHARACTER = scope:slave } }
						}
					}
					add_to_list = characters
				}
			}
		}
	}

	is_shown = {
		NOT = { has_game_rule = carn_slavery_content_disabled }
		NOT = { scope:actor = scope:recipient }
		trigger_if = {
			limit = {
				scope:actor = { is_ai = no }
			}
			scope:recipient = {
				carnx_valid_buyer_or_seller_trigger = { PARTY = scope:actor }
			}
		}
		scope:actor = {
			carnx_is_slave_owner_trigger = yes
		}
		NAND = { # Prevent ai from spamming you with sell slave requests
			scope:actor = { is_ai = yes }
			scope:recipient = { is_ai = no }
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			carnx_can_start_interaction_trigger = yes
		}
		scope:recipient = {
			carnx_can_sell_slave_to_trigger = { PARTY = scope:actor }
		}
		trigger_if = {
			limit = { exists = scope:secondary_recipient }
			scope:secondary_recipient = {
				carn_slave_can_be_sold_trigger = yes
				custom_description = {
					text = "carnx_selling_slaves_is_illegal"
					scope:actor = {
						NOT = { carnx_is_slavery_crime_trigger = { CHARACTER = scope:secondary_recipient } }
					}
				}
			}
		}
	}

	# Use hook
	send_option = {
		is_valid = {
			exists = scope:recipient
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no

	on_accept = {
		if = {
			limit = {
				scope:hook = yes
				scope:actor = {
					has_usable_hook = scope:recipient
				}
			}
			scope:actor = {
				use_hook = scope:recipient
			}
		}
		scope:actor = { save_scope_as = seller }
		scope:secondary_recipient = { save_scope_as = slave }
		scope:recipient = { save_scope_as = buyer }
		carn_buy_slave_effect = {
			SLAVE_PRICE = scope:slave.carnx_slave_bid_price_value
		}
	}

	auto_accept = no

	ai_accept = {
		base = 0

		modifier = {
			add = -50
			desc = carnx_reluctant_to_spend_gold_reason
		}

		modifier = {
			scope:hook = yes
			NOT = { scope:actor = { has_strong_hook = scope:recipient } }
			add = 50
			desc = SCHEME_WEAK_HOOK_USED
		}
		modifier = {
			scope:hook = yes
			scope:actor = { has_strong_hook = scope:recipient }
			add = 100
			desc = SCHEME_STRONG_HOOK_USED
		}

		# Avoid spending money if at war (-50)
		modifier = {
			is_at_war = yes
			add = -50
			desc = IS_AT_WAR_REASON
		}

		# Slavery crime or shunned by faith
		modifier = {
			carnx_is_slavery_crime_trigger = { CHARACTER = scope:secondary_recipient }
			add = carnx_ai_negative_crime_impact_value
			desc = carnx_owning_crime_in_recipient_faith
		}
		modifier = {
			carnx_is_slavery_shunned_trigger = { CHARACTER = scope:secondary_recipient }
			add = carnx_ai_negative_shunned_impact_value
			desc = carnx_owning_shunned_in_recipient_faith
		}

		# Lacking councillors, court positions, knights, or commanders (PIV for each skill, aptitude, or trait above cutoff)
		carnx_lacking_councillors_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_skill_impact_value
		}
		carnx_lacking_court_positions_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_aptitude_impact_value
		}
		carnx_lacking_knights_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_prowess_impact_value
		}
		carnx_lacking_commanders_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_cs_impact_value
		}

		# Family and relations (-25 to -100 depending on how close the relation)
		# Reluctant to buy family and relations, wants to ransom them instead
		carnx_family_and_relations_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = -25
		}

		# Claims (PIV if useful claims on neighbouring realms)
		carnx_claims_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_claims_impact_value
		}

		# Attraction (0 to PIV depending on attraction, doubled for lustful, halved for chaste)
		carnx_attraction_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_attraction_impact_value
		}

		# Female (PIV if a visibly fertile female)
		carnx_female_modifier = {
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_female_impact_value
		}

		# Age (up to PIV depending on age, only if useful)
		carnx_age_modifier = {
			RULER = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_age_impact_value
		}

		# Price (PIV if price < minor_gold_value, NIV if price > major_gold_value)
		carnx_bid_price_modifier = {
			RULER1 = scope:recipient
			RULER2 = scope:recipient
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_positive_price_impact_value
		}

		# Opinion of seller
		opinion_modifier = {
			trigger = {
				NOT = { scope:actor = scope:recipient }
			}
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = carnx_buy_sell_slave_ai_opinion_multiplier
			desc = AI_OPINION_REASON
		}

		# Avoid doing business with rivals or nemesises
		modifier = {
			has_relation_rival = scope:actor
			add = -100
			desc = ACTOR_RIVAL_TO_ME_REASON
		}
		modifier = {
			has_relation_nemesis = scope:actor
			add = -200
			desc = ACTOR_NEMESIS_TO_ME_REASON
		}
	}

	ai_targets = {
		ai_recipients = liege
		ai_recipients = vassals
		ai_recipients = peer_vassals
		ai_recipients = neighboring_rulers
		ai_recipients = scripted_relations
	}

	ai_frequency = 24

	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 50

		# Slave recently bought
		modifier = {
			scope:secondary_recipient = {
				has_character_flag = carnx_slave_recently_bought
			}
			add = -100
		}

		# Slavery shunned by faith
		modifier = {
			carnx_is_slavery_shunned_trigger = { CHARACTER = scope:secondary_recipient }
			add = carnx_ai_negative_shunned_impact_value
		}

		# Employed as councillor (NIV doubled), court position, knight / commander, or in some other way (NIV)
		carnx_employed_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_employed_impact_value
		}

		# Family and relations (-25 to -100 depending on how close the relation)
		# Reluctant to sell family and relations, wants to free them instead
		carnx_family_and_relations_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = -25
		}

		# Claims (NIV if useful claims on neighbouring realms)
		carnx_claims_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_claims_impact_value
		}

		# Attraction (0 to NIV depending on attraction, doubled for lustful, halved for chaste)
		carnx_attraction_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_attraction_impact_value
		}

		# Female (NIV if a visibly fertile female)
		carnx_female_modifier = {
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_female_impact_value
		}

		# Age (up to NIV depending on age, only if useful)
		carnx_age_modifier = {
			RULER = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_age_impact_value
		}

		# Price (NIV if price < minor_gold_value, PIV if price > major_gold_value)
		carnx_bid_price_modifier = {
			RULER1 = scope:recipient
			RULER2 = scope:actor
			SLAVE = scope:secondary_recipient
			SCALE = carnx_ai_negative_price_impact_value
		}

		# Opinion of buyer
		opinion_modifier = {
			trigger = {
				NOT = { scope:actor = scope:recipient }
			}
			who = scope:actor
			opinion_target = scope:recipient
			multiplier = carnx_buy_sell_slave_ai_opinion_multiplier
		}

		# Avoid doing business with rivals or nemesises
		modifier = {
			has_relation_rival = scope:recipient
			add = -100
		}
		modifier = {
			has_relation_nemesis = scope:recipient
			add = -200
		}

		# Not enough gold
		modifier = {
			scope:recipient = {
				save_temporary_scope_as = buyer
				trigger_if = {
					limit = { is_ai = yes }
					short_term_gold < scope:secondary_recipient.carnx_slave_bid_price_value
				}
				trigger_else = {
					gold < scope:secondary_recipient.carnx_slave_bid_price_value
				}
			}
			factor = 0
		}
	}
}
