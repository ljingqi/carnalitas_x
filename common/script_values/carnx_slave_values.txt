# Slave base price. Based on individual_recruit_guest_interaction_cost.
carnx_slave_base_price_value = {
	# Base (reduced compared to guests 20 -> 10)
	add = 10

	# Claims (25 to 100 depending on tier, reduced compared to guests)
	if = {
		limit = {
			any_claim = { tier = tier_empire }
		}
		add = 100
	}
	else_if = {
		limit = {
			any_claim = { tier = tier_kingdom }
		}
		add = 75
	}
	else_if = {
		limit = {
			any_claim = { tier = tier_duchy }
		}
		add = 50
	}
	else_if = {
		limit = {
			any_claim = { tier = tier_county }
		}
		add = 25
	}

	# Dynasty (5 for each dynasty prestige level, reduced compared to guests 15 -> 5)
	if = {
		limit = {
			exists = dynasty
		}
		add = {
			value = dynasty.dynasty_prestige_level # 0-10
			multiply = 5 # Max 50
		}
	}

	# Genetic traits (genetic character value multiplied by 5, same as guests)
	add = {
		value = carnx_genetic_character_value
		multiply = 5
	}

	# Commander traits (10 for each commander trait, reduced compared to guests 15 -> 10)
	if = {
		limit = {
			number_of_commander_traits >= 1
		}
		add = {
			value = number_of_commander_traits
			multiply = 10
		}
	}

	# Court Position traits (court position traits character value multiplied by 5,
	# reduced compared to guests but covering all relevant court positions)
	add = {
		value = carnx_court_position_traits_character_value
		multiply = 5
	}

	# Skills (5 for each skill point above 12, same as guests)
	if = {
		limit = {
			diplomacy >= decent_skill_rating
		}
		add = {
			value = diplomacy
			subtract = decent_skill_rating
			multiply = 5
		}
	}
	if = {
		limit = {
			martial >= decent_skill_rating
		}
		add = {
			value = martial
			subtract = decent_skill_rating
			multiply = 5
		}
	}
	if = {
		limit = {
			stewardship >= decent_skill_rating
		}
		add = {
			value = stewardship
			subtract = decent_skill_rating
			multiply = 5
		}
	}
	if = {
		limit = {
			intrigue >= decent_skill_rating
		}
		add = {
			value = intrigue
			subtract = decent_skill_rating
			multiply = 5
		}
	}
	if = {
		limit = {
			learning >= decent_skill_rating
		}
		add = {
			value = learning
			subtract = decent_skill_rating
			multiply = 5
		}
	}
	if = {
		limit = {
			prowess >= decent_skill_rating
		}
		add = {
			value = prowess
			subtract = decent_skill_rating
			multiply = 3 # Reduced compared to guests
		}
	}

	# Attraction (-25 to 25 depending on attraction, new compared to guests)
	add = {
		value = attraction
		divide = high_positive_attraction
		multiply = 25
	}

	# Female (20 if a visibly fertile female, new compared to guests)
	if = {
		limit = {
			is_female = yes
			is_visibly_fertile = yes
		}
		add = 15
	}

	# Age (up to -10 depending on age, new compared to guests)
	add = {
		value = 0
		if = {
			limit = { carnx_age_value < carnx_prime_age_min_value }
			add = {
				value = carnx_prime_age_min_value
				subtract = carnx_age_value
				divide = {
					value = carnx_prime_age_min_value
					subtract = carnx_young_zero_age_value
				}
				multiply = -10
			}
		}
		else_if = {
			limit = { carnx_age_value > carnx_prime_age_max_value }
			add = {
				value = carnx_age_value
				subtract = carnx_prime_age_max_value
				divide = {
					value = carnx_old_zero_age_value
					subtract = carnx_prime_age_max_value
				}
				multiply = -10
			}
		}
		min = 0
	}

	# Apply a correction factor to get the final price
	multiply = carnx_slave_base_price_multiplier

	floor = yes
	min = 5
}

carnx_slave_ask_price_value = {
	value = carnx_slave_base_price_value

	# Make it higher for the player
	if = {
		limit = {
			trigger_if = {
				limit = { exists = scope:actor }
				scope:actor = { is_ai = no }
			}
			trigger_else = {
				root = { is_ai = no }
			}
		}
		multiply = carnx_slave_ask_price_player_multiplier
	}

	# Adjust price for tribal rulers
	multiply = carnx_slave_price_tribal_multiplier

	# Seller personality multiplier (0.83 to 1.17 based on ai_greed)
	# Chosen so that 0.83 * 1.2 = 1
	if = {
		limit = { exists = scope:seller }
		multiply = {
			value = scope:seller.ai_greed
			multiply = 0.0017
			add = 1
		}
	}

	# Traders get better prices
	if = {
		limit = {
			trigger_if = {
				limit = { exists = scope:actor }
				scope:actor = { has_character_modifier = carnx_slavery_attitude_trader_modifier }
			}
			trigger_else = {
				root = { has_character_modifier = carnx_slavery_attitude_trader_modifier }
			}
		}
		multiply = carnx_slave_price_trader_buyer_multiplier
	}
	if = {
		limit = {
			exists = scope:seller
			scope:seller = { has_character_modifier = carnx_slavery_attitude_trader_modifier }
		}
		multiply = carnx_slave_price_trader_seller_multiplier
	}

	round = yes
	min = 5
}

carnx_slave_bid_price_value = {
	value = carnx_slave_base_price_value

	# Make it lower for the player
	if = {
		limit = {
			trigger_if = {
				limit = { exists = scope:actor }
				scope:actor = { is_ai = no }
			}
			trigger_else = {
				root = { is_ai = no }
			}
		}
		multiply = carnx_slave_bid_price_player_multiplier
	}

	# Adjust price for tribal rulers
	multiply = carnx_slave_price_tribal_multiplier

	# Buyer personality multiplier (0.75 to 1.25 based on ai_greed)
	# Chosen so that 1.25 * 0.8 = 1
	if = {
		limit = { exists = scope:buyer }
		multiply = {
			value = scope:buyer.ai_greed
			multiply = -0.0025
			add = 1
		}
	}

	# Traders get better prices
	if = {
		limit = {
			trigger_if = {
				limit = { exists = scope:actor }
				scope:actor = { has_character_modifier = carnx_slavery_attitude_trader_modifier }
			}
			trigger_else = {
				root = { has_character_modifier = carnx_slavery_attitude_trader_modifier }
			}
		}
		multiply = carnx_slave_price_trader_seller_multiplier
	}
	if = {
		limit = {
			exists = scope:buyer
			scope:buyer = { has_character_modifier = carnx_slavery_attitude_trader_modifier }
		}
		multiply = carnx_slave_price_trader_buyer_multiplier
	}

	round = yes
	min = 5
}

# Opinion gain from gifting a slave. Calculated by multiplying the slave base price (carnx_slave_base_price_value)
# by the "opinion per gold" ratio from sending money as a gift by scope:actor to scope:recipient
# (send_gift_opinion divided by gift_value).
carnx_gift_slave_opinion = {
	value = carnx_slave_base_price_value
	multiply = carnx_slave_price_tribal_multiplier
	multiply = send_gift_opinion
	divide = gift_value
	multiply = carnx_gift_slave_opinion_multiplier
	floor = yes
	min = 10
	max = 50
}

carnx_slave_price_tribal_multiplier = {
	if = {
		limit = { exists = scope:actor }
		scope:actor = { save_temporary_scope_as = party1 }
	}
	else = {
		root = { save_temporary_scope_as = party1 }
	}

	if = {
		limit = {
			exists = scope:buyer
			NOT = { scope:buyer = scope:party1 }
		}
		scope:buyer = { save_temporary_scope_as = party2 }
	}
	else_if = {
		limit = {
			exists = scope:seller
			NOT = { scope:seller = scope:party1 }
		}
		scope:seller = { save_temporary_scope_as = party2 }
	}
	else_if = {
		limit = { exists = scope:recipient }
		scope:recipient = { save_temporary_scope_as = party2 }
	}

	if = {
		limit = { exists = scope:party2 }
		if = {
			limit = {
				scope:party1 = { has_government = tribal_government }
				scope:party2 = { has_government = tribal_government }
			}
			value = 0.5
		}
		else_if = {
			limit = {
				OR = {
					scope:party1 = { has_government = tribal_government }
					scope:party2 = { has_government = tribal_government }
				}
			}
			value = 0.75
		}
		else = {
			value = 1
		}
	}
	else = {
		if = {
			limit = {
				scope:party1 = { has_government = tribal_government }
			}
			value = 0.5
		}
		else = {
			value = 1
		}
	}
}

carnx_buy_slave_ai_accept_no_actor_value = {
	save_temporary_scope_as = slave
	value = 50

	# Slavery crime (-1000) or shunned by faith (-50)
	if = {
		limit = {
			scope:seller = {
				carnx_is_slavery_crime_trigger = { CHARACTER = scope:slave }
			}
		}
		add = carnx_ai_negative_crime_impact_value
	}
	if = {
		limit = {
			scope:seller = {
				carnx_is_slavery_shunned_trigger = { CHARACTER = scope:slave }
			}
		}
		add = carnx_ai_negative_shunned_impact_value
	}

	# Slave recently bought
	if = {
		limit = {
			scope:slave = {
				has_character_flag = carnx_slave_recently_bought
			}
		}
		add = -100
	}

	# Slavery attitude
	# Slavers and traders more likely to sell, liberators and employers less likely
	if = {
		limit = {
			scope:seller = {
				OR = {
					has_character_modifier = carnx_slavery_attitude_slaver_modifier
					has_character_modifier = carnx_slavery_attitude_trader_modifier
				}
			}
		}
		add = carnx_ai_positive_attitude_impact_value
	}
	if = {
		limit = {
			scope:seller = {
				OR = {
					has_character_modifier = carnx_slavery_attitude_liberator_modifier
					has_character_modifier = carnx_slavery_attitude_employer_modifier
				}
			}
		}
		add = carnx_ai_negative_attitude_impact_value
	}

	# Employed as councillor (NIV doubled), court position, knight / commander, or in some other way (NIV)
	if = {
		limit = {
			scope:slave = {
				is_councillor_of = scope:seller
			}
		}
		add = { value = carnx_ai_negative_employed_impact_value multiply = 2 }
	}
	if = {
		limit = {
			scope:slave = {
				AND = {
					has_any_court_position = yes
					any_court_position_employer = { this = scope:seller }
				}
			}
		}
		add = { value = carnx_ai_negative_employed_impact_value multiply = 2 }
	}
	if = {
		limit = {
			scope:slave = {
				OR = {
					is_knight_of = scope:seller
					is_commanding_army = yes
				}
			}
		}
		add = carnx_ai_negative_employed_impact_value
	}
	if = {
		limit = {
			scope:slave = {
				carnx_has_important_role_trigger = { RULER = scope:seller }
			}
		}
		add = carnx_ai_negative_employed_impact_value
	}

	# Lacking councillors or court positions (NIV for max skill or aptitude above cutoff)
	scope:seller = { save_temporary_scope_as = liege }
	add = {
		value = scope:slave.carnx_max_councillor_skill_difference_value
		multiply = carnx_ai_negative_skill_impact_value
	}
	add = {
		value = scope:slave.carnx_max_aptitude_difference_value
		multiply = carnx_ai_negative_aptitude_impact_value
	}

	# Lacking knights or commanders (NIV for skill above cutoff)
	if = {
		limit = {
			scope:slave = {
				carnx_can_serve_as_knight_trigger = { RULER = scope:seller }
			}
		}
		add = {
			value = scope:slave.prowess
			subtract = carnx_default_skill_threshold
			multiply = carnx_ai_negative_prowess_impact_value
		}
	}
	if = {
		limit = {
			scope:slave = {
				carnx_can_serve_as_commander_trigger = { RULER = scope:seller }
			}
		}
		add = {
			value = scope:slave.carnx_commander_skill_value
			multiply = carnx_ai_negative_cs_impact_value
		}
	}

	# Family and relations (-25 to -100 depending on how close the relation)
	# Reluctant to sell family and relations, wants to free them instead
	if = {
		limit = {
			scope:slave = {
				carnx_is_family_or_positive_relation_trigger = { CHARACTER = scope:seller }
			}
		}
		add = {
			value = -25
			if = {
				limit = {
					scope:slave = {
						OR = {
							is_child_of = scope:seller
							has_relation_best_friend = scope:seller
							has_relation_soulmate = scope:seller
						}
					}
				}
				multiply = 4
			}
			else_if = {
				limit = {
					scope:slave = {
						OR = {
							is_close_family_of = scope:seller
							has_relation_friend = scope:seller
							has_relation_lover = scope:seller
							has_secret_relation_lover = scope:seller
							has_relation_crush = scope:seller
							is_spouse_of = scope:seller
						}
					}
				}
				multiply = 3
			}
			else_if = {
				limit = {
					scope:slave = {
						is_close_or_extended_family_of = scope:seller
					}
				}
				multiply = 2
			}
		}
	}

	# Claims (NIV if useful claims on neighbouring realms)
	if = {
		limit = {
			scope:slave = {
				carnx_has_useful_claims_trigger = { RULER = scope:seller }
			}
		}
		add = carnx_ai_negative_claims_impact_value
	}

	# Attraction (0 to NIV depending on attraction, doubled for lustful, halved for chaste)
	if = {
		limit = {
			scope:slave = {
				carnx_is_attractive_to_character_trigger = { CHARACTER = scope:seller }
			}
		}
		add = {
			value = scope:slave.attraction
			divide = high_positive_attraction
			multiply = carnx_ai_negative_attraction_impact_value
			if = {
				limit = { scope:seller = { has_trait = lustful } }
				multiply = 2
			}
			else_if = {
				limit = { scope:seller = { has_trait = chaste } }
				multiply = 0.5
			}
			floor = yes
		}
	}

	# Female (NIV if a visibly fertile female)
	if = {
		limit = {
			scope:slave = {
				carnx_is_visibly_fertile_female_trigger = yes
			}
		}
		add = carnx_ai_negative_female_impact_value
	}

	# Age (up to PIV depending on age)
	if = {
		limit = {
			OR = {
				scope:slave.carnx_age_value < carnx_prime_age_min_value
				scope:slave.carnx_age_value > carnx_prime_age_max_value
			}
		}
		add = {
			value = 0
			if = {
				limit = { scope:slave.carnx_age_value < carnx_prime_age_min_value }
				add = {
					value = carnx_prime_age_min_value
					subtract = scope:slave.carnx_age_value
					divide = {
						value = carnx_prime_age_min_value
						subtract = carnx_young_zero_age_value
					}
					multiply = carnx_ai_positive_age_impact_value
					floor = yes
				}
			}
			else_if = {
				limit = { scope:slave.carnx_age_value > carnx_prime_age_max_value }
				add = {
					value = scope:slave.carnx_age_value
					subtract = carnx_prime_age_max_value
					divide = {
						value = carnx_old_zero_age_value
						subtract = carnx_prime_age_max_value
					}
					multiply = carnx_ai_positive_age_impact_value
					floor = yes
				}
			}
		}
	}

	# Price (NIV if price < minor_gold_value, PIV if price > major_gold_value)
	if = {
		limit = {
			scope:slave.carnx_slave_ask_price_value < scope:seller.minor_gold_value
		}
		add = carnx_ai_negative_price_impact_value
	}
	else_if = {
		limit = {
			scope:slave.carnx_slave_ask_price_value > scope:seller.major_gold_value
		}
		add = carnx_ai_positive_price_impact_value
	}

	# Seller wealth
	if = {
		limit = {
			scope:seller = {
				carnx_is_character_poor_trigger = yes
			}
		}
		add = carnx_ai_positive_wealth_impact_value
	}
	else_if = {
		limit = {
			scope:seller = {
				carnx_is_character_rich_trigger = yes
			}
		}
		add = carnx_ai_negative_wealth_impact_value
	}
}

carnx_buy_slave_ai_accept_value = {
	value = carnx_buy_slave_ai_accept_no_actor_value
	save_temporary_scope_as = slave

	# Opinion of actor
	add = {
		value = scope:opinion_of_actor
		multiply = carnx_buy_sell_slave_ai_opinion_multiplier
		floor = yes
	}

	# Avoid doing business with rivals or nemesises
	if = {
		limit = {
			scope:seller = {
				has_relation_rival = scope:actor
			}
		}
		add = -100
	}
	if = {
		limit = {
			scope:seller = {
				has_relation_nemesis = scope:actor
			}
		}
		add = -200
	}

	# Not enough gold
	if = {
		limit = {
			scope:actor = {
				trigger_if = {
					limit = { is_ai = yes }
					short_term_gold < scope:slave.carnx_slave_ask_price_value
				}
				trigger_else = {
					gold < scope:slave.carnx_slave_ask_price_value
				}
			}
		}
		add = -1000
	}
}

carnx_sell_slave_ai_accept_no_actor_value = {
	save_temporary_scope_as = buyer
	value = -50

	# Avoid spending money if at war
	if = {
		limit = {
			scope:buyer = {
				is_at_war = yes
			}
		}
		add = -50
	}

	# Slavery crime (-1000) or shunned by faith (-50)
	if = {
		limit = {
			scope:buyer = {
				carnx_is_slavery_crime_trigger = { CHARACTER = scope:slave }
			}
		}
		add = carnx_ai_negative_crime_impact_value
	}
	if = {
		limit = {
			scope:buyer = {
				carnx_is_slavery_shunned_trigger = { CHARACTER = scope:slave }
			}
		}
		add = carnx_ai_negative_shunned_impact_value
	}

	# Slavery attitude
	# Traders and employers more likely to buy, slavers and liberators less likely
	if = {
		limit = {
			scope:buyer = {
				OR = {
					has_character_modifier = carnx_slavery_attitude_trader_modifier
					has_character_modifier = carnx_slavery_attitude_employer_modifier
				}
			}
		}
		add = carnx_ai_positive_attitude_impact_value
	}
	if = {
		limit = {
			scope:buyer = {
				OR = {
					has_character_modifier = carnx_slavery_attitude_slaver_modifier
					has_character_modifier = carnx_slavery_attitude_liberator_modifier
				}
			}
		}
		add = carnx_ai_negative_attitude_impact_value
	}

	# Lacking councillors or court positions (PIV for max skill or aptitude above cutoff)
	save_temporary_scope_as = liege
	add = {
		value = scope:slave.carnx_max_councillor_skill_difference_value
		multiply = carnx_ai_positive_skill_impact_value
	}
	add = {
		value = scope:slave.carnx_max_aptitude_difference_value
		multiply = carnx_ai_positive_aptitude_impact_value
	}

	# Lacking knights or commanders (PIV for skill above cutoff)
	if = {
		limit = {
			scope:slave = {
				carnx_can_serve_as_knight_trigger = { RULER = scope:buyer }
			}
		}
		add = {
			value = scope:slave.prowess
			subtract = carnx_default_skill_threshold
			multiply = carnx_ai_positive_prowess_impact_value
		}
	}
	if = {
		limit = {
			scope:slave = {
				carnx_can_serve_as_commander_trigger = { RULER = scope:buyer }
			}
		}
		add = {
			value = scope:slave.carnx_commander_skill_value
			multiply = carnx_ai_positive_cs_impact_value
		}
	}

	# Family and relations (-25 to -100 depending on how close the relation)
	# Reluctant to buy family and relations, wants to ransom them instead
	if = {
		limit = {
			scope:slave = {
				carnx_is_family_or_positive_relation_trigger = { CHARACTER = scope:buyer }
			}
		}
		add = {
			value = -25
			if = {
				limit = {
					scope:slave = {
						OR = {
							is_child_of = scope:buyer
							has_relation_best_friend = scope:buyer
							has_relation_soulmate = scope:buyer
						}
					}
				}
				multiply = 4
			}
			else_if = {
				limit = {
					scope:slave = {
						OR = {
							is_close_family_of = scope:buyer
							has_relation_friend = scope:buyer
							has_relation_lover = scope:buyer
							has_secret_relation_lover = scope:buyer
							has_relation_crush = scope:buyer
							is_spouse_of = scope:buyer
						}
					}
				}
				multiply = 3
			}
			else_if = {
				limit = {
					scope:slave = {
						is_close_or_extended_family_of = scope:buyer
					}
				}
				multiply = 2
			}
		}
	}

	# Claims (PIV if useful claims on neighbouring realms)
	if = {
		limit = {
			scope:slave = {
				carnx_has_useful_claims_trigger = { RULER = scope:buyer }
			}
		}
		add = carnx_ai_positive_claims_impact_value
	}

	# Attraction (0 to PIV depending on attraction, doubled for lustful, halved for chaste)
	if = {
		limit = {
			scope:slave = {
				carnx_is_attractive_to_character_trigger = { CHARACTER = scope:buyer }
				NOT = { carnx_can_serve_as_slave_concubine_trigger = { RULER = scope:buyer } }
			}
		}
		add = {
			value = scope:slave.attraction
			divide = high_positive_attraction
			multiply = carnx_ai_positive_attraction_impact_value
			if = {
				limit = { scope:buyer = { has_trait = lustful } }
				multiply = 2
			}
			else_if = {
				limit = { scope:buyer = { has_trait = chaste } }
				multiply = 0.5
			}
			floor = yes
		}
	}

	# Female (PIV if a visibly fertile female)
	if = {
		limit = {
			scope:slave = {
				carnx_is_visibly_fertile_female_trigger = yes
			}
		}
		add = carnx_ai_positive_female_impact_value
	}

	# Age (up to NIV depending on age)
	if = {
		limit = {
			OR = {
				scope:slave.carnx_age_value < carnx_prime_age_min_value
				scope:slave.carnx_age_value > carnx_prime_age_max_value
			}
		}
		add = {
			value = 0
			if = {
				limit = { scope:slave.carnx_age_value < carnx_prime_age_min_value }
				add = {
					value = carnx_prime_age_min_value
					subtract = scope:slave.carnx_age_value
					divide = {
						value = carnx_prime_age_min_value
						subtract = carnx_young_zero_age_value
					}
					multiply = carnx_ai_negative_age_impact_value
					floor = yes
				}
			}
			else_if = {
				limit = { scope:slave.carnx_age_value > carnx_prime_age_max_value }
				add = {
					value = scope:slave.carnx_age_value
					subtract = carnx_prime_age_max_value
					divide = {
						value = carnx_old_zero_age_value
						subtract = carnx_prime_age_max_value
					}
					multiply = carnx_ai_negative_age_impact_value
					floor = yes
				}
			}
		}
	}

	# Price (PIV if price < minor_gold_value, NIV if price > major_gold_value)
	if = {
		limit = {
			scope:slave.carnx_slave_bid_price_value < scope:buyer.minor_gold_value
		}
		add = carnx_ai_positive_price_impact_value
	}
	else_if = {
		limit = {
			scope:slave.carnx_slave_bid_price_value > scope:buyer.major_gold_value
		}
		add = carnx_ai_negative_price_impact_value
	}

	# Buyer wealth
	if = {
		limit = {
			carnx_is_character_poor_trigger = yes
		}
		add = carnx_ai_negative_wealth_impact_value
	}
	else_if = {
		limit = {
			carnx_is_character_rich_trigger = yes
		}
		add = carnx_ai_positive_wealth_impact_value
	}
}

carnx_sell_slave_ai_accept_value = {
	value = carnx_sell_slave_ai_accept_no_actor_value

	# Opinion of actor
	add = {
		value = scope:opinion_of_actor
		multiply = carnx_buy_sell_slave_ai_opinion_multiplier
		floor = yes
	}

	# Avoid doing business with rivals or nemesises
	if = {
		limit = {
			scope:buyer = {
				has_relation_rival = scope:actor
			}
		}
		add = -100
	}
	if = {
		limit = {
			scope:buyer = {
				has_relation_nemesis = scope:actor
			}
		}
		add = -200
	}
}

carnx_ransom_slave_none_ai_accept_value = {
	save_temporary_scope_as = payer
	value = 0

	# Avoid spending money if at war
	if = {
		limit = {
			scope:payer = {
				is_at_war = yes
			}
		}
		add = -50
	}

	# Opinion of slave
	add = {
		value = scope:opinion_of_slave
		multiply = 0.25
		floor = yes
	}

	# Compassion (-25 to 25 depending on compassion)
	add = {
		value = scope:payer.ai_compassion
		multiply = 0.25
		floor = yes
	}

	# Slavery attitude
	# Liberators more likely to offer ransom, slavers less likely
	if = {
		limit = {
			scope:payer = {
				has_character_modifier = carnx_slavery_attitude_liberator_modifier
			}
		}
		add = carnx_ai_positive_attitude_impact_value
	}
	if = {
		limit = {
			scope:payer = {
				has_character_modifier = carnx_slavery_attitude_slaver_modifier
			}
		}
		add = carnx_ai_negative_attitude_impact_value
	}

	# Family and relations (25 to 100 depending on how close the relation)
	# Eager to pay ransom for family and relations
	if = {
		limit = {
			scope:slave = {
				carnx_is_family_or_positive_relation_trigger = { CHARACTER = scope:payer }
			}
		}
		add = {
			value = 25
			if = {
				limit = {
					scope:slave = {
						OR = {
							is_child_of = scope:payer
							has_relation_best_friend = scope:payer
							has_relation_soulmate = scope:payer
						}
					}
				}
				multiply = 4
			}
			else_if = {
				limit = {
					scope:slave = {
						OR = {
							is_close_family_of = scope:payer
							has_relation_friend = scope:payer
							has_relation_lover = scope:payer
							has_secret_relation_lover = scope:payer
							has_relation_crush = scope:payer
							is_spouse_of = scope:payer
						}
					}
				}
				multiply = 3
			}
			else_if = {
				limit = {
					scope:slave = {
						is_close_or_extended_family_of = scope:payer
					}
				}
				multiply = 2
			}
		}
	}

	# Lacking councillors or court positions (PIV for max skill or aptitude above cutoff)
	save_temporary_scope_as = liege
	add = {
		value = scope:slave.carnx_max_councillor_skill_difference_value
		multiply = carnx_ai_positive_skill_impact_halved_value
	}
	add = {
		value = scope:slave.carnx_max_aptitude_difference_value
		multiply = carnx_ai_positive_aptitude_impact_halved_value
	}

	# Lacking knights or commanders (PIV for skill above cutoff)
	if = {
		limit = {
			scope:slave = {
				carnx_can_serve_as_knight_trigger = { RULER = scope:payer }
			}
		}
		add = {
			value = scope:slave.prowess
			subtract = carnx_default_skill_threshold
			multiply = carnx_ai_positive_prowess_impact_halved_value
		}
	}
	if = {
		limit = {
			scope:slave = {
				carnx_can_serve_as_commander_trigger = { RULER = scope:payer }
			}
		}
		add = {
			value = scope:slave.carnx_commander_skill_value
			multiply = carnx_ai_positive_cs_impact_halved_value
		}
	}

	# Claims (PIV if useful claims on neighbouring realms)
	if = {
		limit = {
			scope:slave = {
				carnx_has_useful_claims_trigger = { RULER = scope:payer }
			}
		}
		add = carnx_ai_positive_claims_impact_halved_value
	}

	# Execute reason, rival, cheating spouse (-75) or nemesis (-150)
	if = {
		limit = {
			scope:payer = {
				carnx_has_execute_reason_slave_trigger = { CHARACTER = scope:slave RULER = scope:payer }
			}
		}
		add = {
			value = -75
			if = {
				limit = {
					scope:payer = {
						has_relation_nemesis = scope:slave
					}
				}
				multiply = 2
			}
		}
	}

	# Avoid doing business with rivals or nemesises
	if = {
		limit = {
			scope:payer = {
				has_relation_rival = scope:actor
			}
		}
		add = -100
	}
	if = {
		limit = {
			scope:payer = {
				has_relation_nemesis = scope:actor
			}
		}
		add = -200
	}

	# Intimidated or cowed by actor (25 or 50)
	if = {
		limit = {
			scope:payer = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
		}
		add = intimidated_halved_reason_value
	}
	if = {
		limit = {
			scope:payer = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
		}
		add = cowed_halved_reason_value
	}
}

carnx_ransom_slave_gold_ai_accept_value = {
	value = carnx_ransom_slave_none_ai_accept_value

	# Asked for gold (0 to -50)
	add = {
		value = -25
		add = {
			value = scope:payer.ai_greed
			multiply = -0.25
			floor = yes
		}
	}
}

carnx_ransom_slave_favor_ai_accept_value = {
	value = carnx_ransom_slave_none_ai_accept_value

	# Asked for a favor (-25 or -50)
	if = {
		limit = { scope:payer.top_liege = scope:actor.top_liege	}
		add = -50
	}
	else = {
		add = -25
	}
}

carnx_pay_ransom_slave_none_ai_accept_value = {
	save_temporary_scope_as = slave
	value = 0

	# Slave recently bought
	if = {
		limit = {
			scope:slave = {
				has_character_flag = carnx_slave_recently_bought
			}
		}
		add = -100
	}

	# Opinion of slave
	add = {
		value = scope:opinion_of_slave
		multiply = 0.25
		floor = yes
	}

	# Compassion (-25 to 25 depending on compassion)
	add = {
		value = scope:owner.ai_compassion
		multiply = 0.25
		floor = yes
	}

	# Slavery crime (-1000) or shunned by faith (-50)
	if = {
		limit = {
			scope:owner = {
				carnx_is_slavery_crime_trigger = { CHARACTER = scope:slave }
			}
		}
		add = carnx_ai_positive_crime_impact_reduced_value
	}
	if = {
		limit = {
			scope:owner = {
				carnx_is_slavery_shunned_trigger = { CHARACTER = scope:slave }
			}
		}
		add = carnx_ai_positive_shunned_impact_reduced_value
	}

	# Slavery attitude
	# Liberators more likely to offer ransom, slavers less likely
	if = {
		limit = {
			scope:owner = {
				has_character_modifier = carnx_slavery_attitude_liberator_modifier
			}
		}
		add = carnx_ai_positive_attitude_impact_value
	}
	if = {
		limit = {
			scope:owner = {
				has_character_modifier = carnx_slavery_attitude_slaver_modifier
			}
		}
		add = carnx_ai_negative_attitude_impact_value
	}

	# Family and relations (-25 to -100 depending on how close the relation)
	# Reluctant to ransom family and relations, wants to free them instead
	if = {
		limit = {
			scope:slave = {
				carnx_is_family_or_positive_relation_trigger = { CHARACTER = scope:owner }
			}
		}
		add = {
			value = -25
			if = {
				limit = {
					scope:slave = {
						OR = {
							is_child_of = scope:owner
							has_relation_best_friend = scope:owner
							has_relation_soulmate = scope:owner
						}
					}
				}
				multiply = 4
			}
			else_if = {
				limit = {
					scope:slave = {
						OR = {
							is_close_family_of = scope:owner
							has_relation_friend = scope:owner
							has_relation_lover = scope:owner
							has_secret_relation_lover = scope:owner
							has_relation_crush = scope:owner
							is_spouse_of = scope:owner
						}
					}
				}
				multiply = 3
			}
			else_if = {
				limit = {
					scope:slave = {
						is_close_or_extended_family_of = scope:owner
					}
				}
				multiply = 2
			}
		}
	}

	# Employed as councillor (NIV doubled), court position, knight / commander, or in some other way (NIV)
	if = {
		limit = {
			scope:slave = {
				is_councillor_of = scope:owner
			}
		}
		add = { value = carnx_ai_negative_employed_impact_halved_value multiply = 2 }
	}
	if = {
		limit = {
			scope:slave = {
				AND = {
					has_any_court_position = yes
					any_court_position_employer = { this = scope:owner }
				}
			}
		}
		add = { value = carnx_ai_negative_employed_impact_halved_value multiply = 2 }
	}
	if = {
		limit = {
			scope:slave = {
				OR = {
					is_knight_of = scope:owner
					is_commanding_army = yes
				}
			}
		}
		add = carnx_ai_negative_employed_impact_halved_value
	}
	if = {
		limit = {
			scope:slave = {
				carnx_has_important_role_trigger = { RULER = scope:owner }
			}
		}
		add = carnx_ai_negative_employed_impact_halved_value
	}

	# Lacking councillors or court positions (NIV for max skill or aptitude above cutoff)
	scope:owner = { save_temporary_scope_as = liege }
	add = {
		value = scope:slave.carnx_max_councillor_skill_difference_value
		multiply = carnx_ai_negative_skill_impact_halved_value
	}
	add = {
		value = scope:slave.carnx_max_aptitude_difference_value
		multiply = carnx_ai_negative_aptitude_impact_halved_value
	}

	# Lacking knights or commanders (NIV for skill above cutoff)
	if = {
		limit = {
			scope:slave = {
				carnx_can_serve_as_knight_trigger = { RULER = scope:owner }
			}
		}
		add = {
			value = scope:slave.prowess
			subtract = carnx_default_skill_threshold
			multiply = carnx_ai_negative_prowess_impact_halved_value
		}
	}
	if = {
		limit = {
			scope:slave = {
				carnx_can_serve_as_commander_trigger = { RULER = scope:owner }
			}
		}
		add = {
			value = scope:slave.carnx_commander_skill_value
			multiply = carnx_ai_negative_cs_impact_halved_value
		}
	}

	# Claims (NIV if useful claims on neighbouring realms)
	if = {
		limit = {
			scope:slave = {
				carnx_has_useful_claims_trigger = { RULER = scope:owner }
			}
		}
		add = carnx_ai_negative_claims_impact_halved_value
	}

	# Attraction (0 to NIV depending on attraction, doubled for lustful, halved for chaste)
	if = {
		limit = {
			scope:slave = {
				carnx_is_attractive_to_character_trigger = { CHARACTER = scope:owner }
			}
		}
		add = {
			value = scope:slave.attraction
			divide = high_positive_attraction
			multiply = carnx_ai_negative_attraction_impact_halved_value
			if = {
				limit = { scope:owner = { has_trait = lustful } }
				multiply = 2
			}
			else_if = {
				limit = { scope:owner = { has_trait = chaste } }
				multiply = 0.5
			}
			floor = yes
		}
	}

	# Female (NIV if a visibly fertile female)
	if = {
		limit = {
			scope:slave = {
				carnx_is_visibly_fertile_female_trigger = yes
			}
		}
		add = carnx_ai_negative_female_impact_halved_value
	}

	# Age (up to PIV depending on age)
	if = {
		limit = {
			OR = {
				scope:slave.carnx_age_value < carnx_prime_age_min_value
				scope:slave.carnx_age_value > carnx_prime_age_max_value
			}
		}
		add = {
			value = 0
			if = {
				limit = { scope:slave.carnx_age_value < carnx_prime_age_min_value }
				add = {
					value = carnx_prime_age_min_value
					subtract = scope:slave.carnx_age_value
					divide = {
						value = carnx_prime_age_min_value
						subtract = carnx_young_zero_age_value
					}
					multiply = carnx_ai_positive_age_impact_halved_value
					floor = yes
				}
			}
			else_if = {
				limit = { scope:slave.carnx_age_value > carnx_prime_age_max_value }
				add = {
					value = scope:slave.carnx_age_value
					subtract = carnx_prime_age_max_value
					divide = {
						value = carnx_old_zero_age_value
						subtract = carnx_prime_age_max_value
					}
					multiply = carnx_ai_positive_age_impact_halved_value
					floor = yes
				}
			}
		}
	}

	# Execute reason, rival, cheating spouse (-75) or nemesis (-150)
	if = {
		limit = {
			scope:owner = {
				carnx_has_execute_reason_slave_trigger = { CHARACTER = scope:slave RULER = scope:owner }
			}
		}
		add = {
			value = -75
			if = {
				limit = {
					scope:owner = {
						has_relation_nemesis = scope:slave
					}
				}
				multiply = 2
			}
		}
	}

	# Avoid doing business with rivals or nemesises
	if = {
		limit = {
			scope:owner = {
				has_relation_rival = scope:actor
			}
		}
		add = -100
	}
	if = {
		limit = {
			scope:owner = {
				has_relation_nemesis = scope:actor
			}
		}
		add = -200
	}

	# Intimidated or cowed by actor (25 or 50)
	if = {
		limit = {
			scope:owner = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
		}
		add = intimidated_halved_reason_value
	}
	if = {
		limit = {
			scope:owner = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
		}
		add = cowed_halved_reason_value
	}
}

carnx_pay_ransom_slave_gold_ai_accept_value = {
	value = carnx_pay_ransom_slave_none_ai_accept_value

	# Offerred gold (0 to 50)
	if = {
		limit = {
			scope:actor = {
				save_temporary_scope_as = payer
				gold >= scope:slave.carnx_slave_ransom_cost_value
			}
		}
		add = 50
	}
	else_if = {
		limit = {
			scope:actor = {
				save_temporary_scope_as = payer
				gold >= scope:slave.carnx_slave_half_ransom_cost_value
			}
			NOT = { scope:owner.ai_greed >= medium_positive_ai_value }
		}
		add = 25
	}
}

carnx_pay_ransom_slave_favor_ai_accept_value = {
	value = carnx_pay_ransom_slave_none_ai_accept_value

	# Offerred a favor (0 or 50)
	if = {
		limit = { scope:owner.top_liege = scope:actor.top_liege	}
		add = 50
	}
}

carnx_commander_skill_value = {
	value = martial
	subtract = carnx_default_skill_threshold
	add = {
		value = number_of_commander_traits
		multiply = 3
	}
}

carnx_slave_ransom_cost_value = {
	if = {
		limit = { exists = scope:payer }
		scope:payer = { save_temporary_scope_as = party }
	}
	else_if = {
		limit = { exists = scope:recipient }
		scope:recipient = { save_temporary_scope_as = party }
	}
	else = {
		root = { save_temporary_scope_as = party }
	}

	value = 0

	# TODO Use define:NImprisonment|RANSOM_COST_BY_TIER if possible
	scope:party = {
		if = {
			limit = { highest_held_title_tier = tier_empire }
			add = 500
		}
		else_if = {
			limit = { highest_held_title_tier = tier_kingdom }
			add = 200
		}
		else_if = {
			limit = { highest_held_title_tier = tier_duchy }
			add = 100
		}
		else_if = {
			limit = { highest_held_title_tier = tier_county }
			add = 50
		}
		else_if = {
			limit = { highest_held_title_tier = tier_barony }
			add = 30
		}
		else = {
			add = 20
		}
	}

	if = {
		limit = { is_primary_heir_of = scope:party }
		multiply = define:NImprisonment|RANSOM_MULTIPLIER_PRIMARY_HEIR
	}
	else_if = {
		limit = { is_spouse_of = scope:party }
		multiply = define:NImprisonment|RANSOM_MULTIPLIER_SPOUSE
	}
	else_if = {
		limit = { is_close_family_of = scope:party }
		multiply = define:NImprisonment|RANSOM_MULTIPLIER_CLOSE_FAMILY
	}
	else = {
		multiply = define:NImprisonment|RANSOM_MULTIPLIER_OTHER
	}

	min = define:NImprisonment|RANSOM_MIN_COST

	# Round up to the closest number divisible by RANSOM_ROUNDED_TO
	divide = define:NImprisonment|RANSOM_ROUNDED_TO
	ceiling = yes
	multiply = define:NImprisonment|RANSOM_ROUNDED_TO
}

carnx_slave_half_ransom_cost_value = {
	value = carnx_slave_ransom_cost_value
	divide = 2
	floor = yes
}

carnx_enslave_tyranny_gain = {
	value = carnx_enslave_basic_tyranny_gain
	if = {
		limit = {
			scope:slave = {
				has_no_real_status_trigger = yes
			}
		}
		divide = 2
	}
}

carnx_enslave_piety_loss = {
	if = {
		limit = {
			scope:slave = {
				has_no_particular_noble_roots_trigger = yes
			}
		}
		value = minor_piety_loss
	}
	else = {
		value = medium_piety_loss
	}
}

carnx_free_slave_piety_gain = {
	if = {
		limit = {
			scope:slave = {
				has_no_particular_noble_roots_trigger = yes
			}
		}
		value = minor_piety_gain
	}
	else = {
		value = medium_piety_gain
	}
}

carnx_root_faith_dominant_gender_adjusted_female_chance = {
	value = root_faith_dominant_gender_adjusted_female_chance
	add = carnx_create_character_female_chance
	subtract = 50
	min = 0
	max = 100
}

carnx_mark_for_enslavement_chance = {
	if = {
		# Don't mark for enslavement landed characters or their family
		limit = { carnx_is_landed_or_family_trigger = yes }
		value = 0
	}
	else_if = {
		limit = { exists = scope:raider }
		value = carnx_base_raid_mark_for_enslavement_chance
	}
	else = {
		value = carnx_base_siege_mark_for_enslavement_chance
	}
}

carnx_slavery_attitude_slaver_chance = {
	value = 0
	if = {
		limit = { carnx_slavery_attitude_slaver_government_trigger = yes }
		add = 5
	}
	if = {
		limit = { carnx_slavery_attitude_slaver_faith_culture_trigger = yes }
		add = 5
	}
	if = {
		limit = { carnx_is_slavery_always_accepted_trigger = yes }
		add = 2.5
	}
	add = {
		value = ai_greed
		multiply = 0.025
	}
	add = {
		value = ai_compassion
		multiply = -0.025
	}
	min = 0
}

carnx_slavery_attitude_liberator_chance = {
	value = 0
	if = {
		limit = { carnx_slavery_attitude_liberator_government_trigger = yes }
		add = 5
	}
	if = {
		limit = { carnx_slavery_attitude_liberator_faith_culture_trigger = yes }
		add = 5
	}
	else_if = {
		limit = { carnx_is_slavery_never_accepted_trigger = yes }
		add = 2.5
	}
	add = {
		value = ai_greed
		multiply = -0.025
	}
	add = {
		value = ai_compassion
		multiply = 0.025
	}
	min = 0
}

carnx_slavery_attitude_trader_chance = {
	value = 0
	if = {
		limit = { carnx_slavery_attitude_trader_government_trigger = yes }
		add = 5
	}
	if = {
		limit = { carnx_slavery_attitude_trader_faith_culture_trigger = yes }
		add = 5
	}
	if = {
		limit = {
			carnx_is_slavery_always_accepted_trigger = no
			carnx_is_slavery_never_accepted_trigger = no
		}
		add = 2.5
	}
	if = {
		limit = {
			highest_held_title_tier >= tier_kingdom
		}
		add = -2.5
	}
	add = {
		value = ai_greed
		multiply = 0.025
	}
	add = {
		value = ai_honor
		multiply = -0.025
	}
	min = 0
}

carnx_slavery_attitude_employer_chance = {
	value = 0
	if = {
		limit = { carnx_slavery_attitude_employer_government_trigger = yes }
		add = 5
	}
	if = {
		limit = { carnx_slavery_attitude_employer_faith_culture_trigger = yes }
		add = 5
	}
	if = {
		limit = {
			carnx_is_slavery_always_accepted_trigger = no
			carnx_is_slavery_never_accepted_trigger = no
		}
		add = 2.5
	}
	if = {
		limit = {
			highest_held_title_tier >= tier_kingdom
		}
		add = 2.5
	}
	add = {
		value = ai_rationality
		multiply = 0.025
	}
	min = 0
}

carnx_age_value = {
	value = age
}

carnx_slave_trading_range_value = {
	if = {
		limit = { highest_held_title_tier = tier_empire }
		value = squared_distance_almost_massive
	}
	else_if = {
		limit = { highest_held_title_tier = tier_kingdom }
		value = squared_distance_huge
	}
	else_if = {
		limit = { highest_held_title_tier = tier_duchy }
		value = squared_distance_large
	}
	else_if = {
		limit = { highest_held_title_tier = tier_county }
		value = squared_distance_medium
	}
	else = {
		value = squared_distance_small
	}
}

# Number of potential buyers shown in the Sell Slaves interaction.
carnx_number_of_potential_buyers_value = {
	if = {
		limit = { has_game_rule = carnx_number_of_potential_buyers_01 }
		value = 1
	}
	else_if = {
		limit = { has_game_rule = carnx_number_of_potential_buyers_02 }
		value = 2
	}
	else_if = {
		limit = { has_game_rule = carnx_number_of_potential_buyers_05 }
		value = 5
	}
	else_if = {
		limit = { has_game_rule = carnx_number_of_potential_buyers_10 }
		value = 10
	}
	else_if = {
		limit = { has_game_rule = carnx_number_of_potential_buyers_20 }
		value = 20
	}
	else_if = {
		limit = { has_game_rule = carnx_number_of_potential_buyers_50 }
		value = 50
	}
	else = {
		value = 1000
	}
}

# Not used due to carn_had_sex_with_effect failing to parse script values.
carnx_slave_pregnancy_chance_value = {
	value = fertility
	add = {
		value = scope:slave.fertility
		multiply = define:NChildbirth|CONCUBINE_FERTILITY_MULTIPLIER
	}
	divide = 2
	multiply = carnx_slave_pregnancy_chance
	floor = yes
	min = 1
}

carnx_slavery_shunned_count_value = {
	save_temporary_scope_as = owner
	value = 0
	every_relation = {
		type = slave
		limit = {
			scope:owner = {
				carnx_is_slavery_shunned_trigger = { CHARACTER = prev }
			}
		}
		add = 1
	}
}

carnx_slavery_crime_count_value = {
	save_temporary_scope_as = owner
	value = 0
	every_relation = {
		type = slave
		limit = {
			scope:owner = {
				carnx_is_slavery_crime_trigger = { CHARACTER = prev }
			}
		}
		add = 1
	}
}

carn_scope_buyer_current_gold_value = {
	value = scope:buyer.short_term_gold
}

carnx_scope_secondary_recipient_slave_ransom_cost_value = {
	value = 0
	if = {
		limit = { exists = scope:secondary_recipient }
		add = scope:secondary_recipient.carnx_slave_ransom_cost_value
	}
}

carnx_scope_secondary_recipient_slave_pay_ransom_cost_value = {
	value = 0
	if = {
		limit = {
			exists = scope:secondary_recipient
			exists = scope:actor
			scope:actor = { save_temporary_scope_as = payer }
		}
		add = scope:secondary_recipient.carnx_slave_ransom_cost_value
	}
}